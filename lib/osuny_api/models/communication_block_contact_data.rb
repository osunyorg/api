=begin
#Osuny

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.68
=end

require 'date'

module OsunyApi
  # Data of the block. The structure depends on the template kind.
  class CommunicationBlockContactData
    attr_accessor :description

    attr_accessor :name

    attr_accessor :address

    attr_accessor :information

    attr_accessor :zipcode

    attr_accessor :city

    attr_accessor :country

    attr_accessor :url

    attr_accessor :phone_numbers

    attr_accessor :emails

    attr_accessor :social_mastodon

    attr_accessor :social_x

    attr_accessor :social_linkedin

    attr_accessor :social_youtube

    attr_accessor :social_vimeo

    attr_accessor :social_peertube

    attr_accessor :social_instagram

    attr_accessor :social_facebook

    attr_accessor :social_tiktok

    attr_accessor :social_github

    attr_accessor :elements

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'description' => :'description',
        :'name' => :'name',
        :'address' => :'address',
        :'information' => :'information',
        :'zipcode' => :'zipcode',
        :'city' => :'city',
        :'country' => :'country',
        :'url' => :'url',
        :'phone_numbers' => :'phone_numbers',
        :'emails' => :'emails',
        :'social_mastodon' => :'social_mastodon',
        :'social_x' => :'social_x',
        :'social_linkedin' => :'social_linkedin',
        :'social_youtube' => :'social_youtube',
        :'social_vimeo' => :'social_vimeo',
        :'social_peertube' => :'social_peertube',
        :'social_instagram' => :'social_instagram',
        :'social_facebook' => :'social_facebook',
        :'social_tiktok' => :'social_tiktok',
        :'social_github' => :'social_github',
        :'elements' => :'elements'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'description' => :'Object',
        :'name' => :'Object',
        :'address' => :'Object',
        :'information' => :'Object',
        :'zipcode' => :'Object',
        :'city' => :'Object',
        :'country' => :'Object',
        :'url' => :'Object',
        :'phone_numbers' => :'Object',
        :'emails' => :'Object',
        :'social_mastodon' => :'Object',
        :'social_x' => :'Object',
        :'social_linkedin' => :'Object',
        :'social_youtube' => :'Object',
        :'social_vimeo' => :'Object',
        :'social_peertube' => :'Object',
        :'social_instagram' => :'Object',
        :'social_facebook' => :'Object',
        :'social_tiktok' => :'Object',
        :'social_github' => :'Object',
        :'elements' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OsunyApi::CommunicationBlockContactData` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OsunyApi::CommunicationBlockContactData`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'information')
        self.information = attributes[:'information']
      end

      if attributes.key?(:'zipcode')
        self.zipcode = attributes[:'zipcode']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'phone_numbers')
        if (value = attributes[:'phone_numbers']).is_a?(Array)
          self.phone_numbers = value
        end
      end

      if attributes.key?(:'emails')
        if (value = attributes[:'emails']).is_a?(Array)
          self.emails = value
        end
      end

      if attributes.key?(:'social_mastodon')
        self.social_mastodon = attributes[:'social_mastodon']
      end

      if attributes.key?(:'social_x')
        self.social_x = attributes[:'social_x']
      end

      if attributes.key?(:'social_linkedin')
        self.social_linkedin = attributes[:'social_linkedin']
      end

      if attributes.key?(:'social_youtube')
        self.social_youtube = attributes[:'social_youtube']
      end

      if attributes.key?(:'social_vimeo')
        self.social_vimeo = attributes[:'social_vimeo']
      end

      if attributes.key?(:'social_peertube')
        self.social_peertube = attributes[:'social_peertube']
      end

      if attributes.key?(:'social_instagram')
        self.social_instagram = attributes[:'social_instagram']
      end

      if attributes.key?(:'social_facebook')
        self.social_facebook = attributes[:'social_facebook']
      end

      if attributes.key?(:'social_tiktok')
        self.social_tiktok = attributes[:'social_tiktok']
      end

      if attributes.key?(:'social_github')
        self.social_github = attributes[:'social_github']
      end

      if attributes.key?(:'elements')
        if (value = attributes[:'elements']).is_a?(Array)
          self.elements = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          description == o.description &&
          name == o.name &&
          address == o.address &&
          information == o.information &&
          zipcode == o.zipcode &&
          city == o.city &&
          country == o.country &&
          url == o.url &&
          phone_numbers == o.phone_numbers &&
          emails == o.emails &&
          social_mastodon == o.social_mastodon &&
          social_x == o.social_x &&
          social_linkedin == o.social_linkedin &&
          social_youtube == o.social_youtube &&
          social_vimeo == o.social_vimeo &&
          social_peertube == o.social_peertube &&
          social_instagram == o.social_instagram &&
          social_facebook == o.social_facebook &&
          social_tiktok == o.social_tiktok &&
          social_github == o.social_github &&
          elements == o.elements
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [description, name, address, information, zipcode, city, country, url, phone_numbers, emails, social_mastodon, social_x, social_linkedin, social_youtube, social_vimeo, social_peertube, social_instagram, social_facebook, social_tiktok, social_github, elements].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OsunyApi.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
